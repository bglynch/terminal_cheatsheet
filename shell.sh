#!/bin/bash
dir=$( cd "$(dirname "${BASH_SOURCE[0]}")" ; pwd -P )
source "${dir}/config.sh"

ttx="\033[38;2;123;66;188m" # terrafrom purple 123 66 188
tl="${bold}${tbg}${ttx}"
echo -e "${tl}                                                                 ${z}"
echo -e "${tl}                       -- SHELL SCRIPTING --                     ${z}"
echo -e "${tl}                                                                 ${z}"
echo -e "https://google.github.io/styleguide/shellguide.html"
echo -e "VARIABLES"
echo -e " single quotes ('): treat every character literally"
echo -e " double quotes (\"): allow you to do substitution"
echo -e " ${c}VAR=hello                   ${f}assign variable"
echo -e " ${c}VAR='hello world'           ${f}assign variable that has spaces"
echo -e " ${c}VAR=\"hello \$VAR\"            ${f}assign variable with substitution"
echo -e " ${c}VAR=\"hello \${VAR}_\${FOO}\"   ${f}assign variable with substitution"
echo -e " ${c}VAR=\$( ls /etc | wc -l )    ${f}command substitution"
echo
echo -e "${z}LIST"
echo -e " ${c}arr=()       ${f}Create an empty array       ${c}arr[0]=3       ${f}Overwrite 1st element                     "
echo -e " ${c}arr=(1 2 3)  ${f}Initialize array            ${c}arr+=(4)       ${f}Append value(s)                           "
echo -e " ${c}\${arr[2]}   ${f} Retrieve third element     ${c} str=\$(ls)      ${f}Save ls output as a string               "
echo -e " ${c}\${arr[@]}   ${f} Retrieve all elements      ${c} arr=( \$(ls) )  ${f}Save ls output as an array of files      "
echo -e " ${c}\${!arr[@]}  ${f} Retrieve array indices     ${c} \${arr[@]:s:n}  ${f}Retrieve n elements starting at index s  "
echo -e " ${c}\${#arr[@]}  ${f} Calculate array size      $z"
echo
echo -e "SPECIAL VARIABLES                                                                        "
echo -e " ${c}\$0         ${v}The name of the Bash script.                                      "
echo -e " ${c}\$1-\$9     ${v} The first 9 arguments to the Bash script. (As mentioned above.)  "
echo -e " ${c}\$#         ${v}How many arguments were passed to the Bash script.                "
echo -e " ${c}\$@         ${v}All the arguments supplied to the Bash script.                    "
echo -e " ${c}\$?         ${v}The exit status of the most recently run process.                 "
echo -e " ${c}\$$         ${v}The process ID of the current script.                             "
echo -e " ${c}\$USER      ${v}The username of the user running the script.                      "
echo -e " ${c}\$HOSTNAME  ${v}The hostname of the machine the script is running on.             "
echo -e " ${c}\$SECONDS   ${v}The number of seconds since the script was started.               "
echo -e " ${c}\$RANDOM    ${v}Returns a different random number each time is it referred to.    "
echo -e " ${c}\$LINENO    ${v}Returns the current line number in the Bash script.               $z"
echo
echo -e "EXIT STATUS                                  "
echo -e " ${c}0   ${v}Success                        ${c}127  ${v}Key has expired"
echo -e " ${c}1   ${v}Operation not permitted        ${c}AWS CLI Return Codes  ${v}https://awscli.amazonaws.com/v2/documentation/api/latest/topic/return-codes.html"
echo -e " ${c}2   ${v}No such file or directory      "
echo -e " ${c}3   ${v}No such process                "
echo -e " ${c}4   ${v}Interrupted system call        "
echo -e " ${c}5   ${v}Input/output error             "
echo -e " ${c}6   ${v}No such device or address      "
echo -e " ${c}7   ${v}Argument list too long         "
echo -e " ${c}8   ${v}Exec format error              "
echo -e " ${c}9   ${v}Bad file descriptor            "
echo -e " ${c}10  ${v}No child processes             "
echo
echo -e "USER INPUT"
echo -e " ${c}read VAR                        ${v}Read in user input                                            "
echo -e " ${c}read -p 'Username: ' USERNAME   ${v}Read in user input with propmt                                          "
echo
echo -e "IF STATEMENTS"
echo -e "Sample if/elif/else                     CONDITION        TRUE IF...                                                  "
echo -e "$bg $r if$v [[ \$VAR$n -gt$v 10 ]]        $z         $n -n$z VAR       $d2    Length of VAR is greater than zero.            "
echo -e "$bg $r then                        $z         $n -z$z VAR          $d2 VAR is empty.                                     "
echo -e "$bg $f   echo$v hello                $z          STR1$n =$z STR2   $d2   STR1 and STR2 are equal.                        "
echo -e "$bg $r elif$v [[ \$VAR$n -eq$v 10 ]]      $z          STR1$n !=$z STR2 $d2    STR1 and STR2 are not equal.                   "
echo -e "$bg $r then                        $z          INT1$n -eq$z INT2   $d2 INT1 and INT2 are equal.                          "
echo -e "$bg $f   echo$v elif-hello           $z          INT1$n -gt$z INT2 $d2   INT1 is greater than INT2.                      "
echo -e "$bg $r else                        $z          INT1$n -lt$z INT2   $d2 INT1 is less than INT2.                           "
echo -e "$bg $f   echo$v else-hello           $z          INT1$n -ge$z INT2 $d2   INT1 is equal or greater than INT2.             "
echo -e "$bg $r fi                          $z          INT1$n -le$z INT2   $d2 INT1 is equal or less than INT2.                $z"
echo -e "                                        $n-h$z FILE         $d2 FILE exists and is a symbolic link.                    $z"
echo -e "Single Line if                          $n-r$z FILE         $d2 FILE exists and is readable.                           $z"
echo -e "$bg $r if$v [[ \$USER ]];$r then$f echo$v hello;$r fi $z  $n-w$z FILE         $d2 FILE exists and is writable.                           $z"
echo -e "                                        $n-x$z FILE         $d2 FILE exists and is executable.                         $z"
echo -e "$bg  [[ \$USER ]]$r &&$f echo$v hello           $z  $n-d$z FILE         $d2 FILE exists and is a directory.                        $z"
echo -e "                                        $n-e$z FILE         $d2 FILE exists and is a file, regardless of type (node, directory, socket, etc.).$z"
echo -e "                                        $n-f$z FILE         $d2 FILE exists and is a regular file (not a directory or device).$z"
echo
echo -e "LOOPS                            "
echo -e "${d2}While loop                          For loop                        Loop through items               Loop through indices                Loop through range                             "
echo -e "$bg  counter=1                      $z   $bg $v names=${t}'Stan Kyle Cartman'  $z   $bg$v  my_list=(1 2 3)             $z   $bg$v  my_list=(1 2 3)                $z   $bg                       $z"
echo -e "$bg $r while$v [ \$counter -le 10 ];$r do  $z   $bg $r for$v name$r in$n \$names;$r do     $z   $bg$r  for$v i$r in$n \${my_list[@]};$r do  $z   $bg$r  for$v i$r  in$n \${!my_list[@]};$r do   $z   $bg$r  for$v i$r in$v {1..3};$r do  $z"
echo -e "$bg $f   echo$v \$counter                $z   $bg $f   echo$v \$name               $z   $bg$f    echo$v \$i                   $z   $bg$f    echo$v \$i                      $z   $bg$f    echo$v \$i            $z"
echo -e "$bg $v   ((counter++))                $z   $bg $r done                       $z   $bg$r  done                        $z   $bg$r  done                           $z   $bg$r  done                 $z"
echo -e "$bg $r done                           $z"
echo
echo -e "FUNCTIONS $d2  https://linuxize.com/post/bash-functions/"
echo -e " Basic                           Local variable                       Arguments                                                 "
echo -e "$bg$f func_name$v () {             $z    $bg var1=$t'A'                               $z  $bg$f greeting$v () {           $z  "
echo -e "$bg$r   commands                 $z    $bg var2=$t'B'                               $z  $bg$r   echo $t \"Hello$n \$1\"      $z  "
echo -e "$bg }                          $z    $bg                                        $z  $bg }                       $z  "
echo -e "                                $bg$f my_func$v () {                           $z  $bg$f greeting$t \"Joe\"          $z  "
echo -e " Single Line                    $bg$r   local$v var1=$t'C' $cc# doesnt update var1  $z                                "
echo -e "$bg$f func_name$v () {$r commands;$v } $z    $bg   var2=$t'D' $cc# update var2               $z  $d2 Output                    $z"
echo -e "                                $bg$r   echo$v \"var1:$n \$var1$v, var2:$n \$var2$v\"      $z  $bg Hello Joe           $z     "
echo -e "                                $bg }                                      $z                                "

