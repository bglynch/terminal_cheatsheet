#!/bin/bash
dir=$( cd "$(dirname "${BASH_SOURCE[0]}")" ; pwd -P )
parent_dir="$(dirname "$dir")"
source "${parent_dir}/config.sh"

echo -e "FUNCTIONS"
echo -e "- standard                     |  - arrow function                 | - arrow function, no curly bracket"
echo -e "  ${r}function ${f}addTo${v}(var1, var2){  |  ${r}const ${f}addTo ${v}= (var1, var2) ${n}=>${v} {  |  ${r}const ${f}addTo ${v}= (var1, var2) ${n}=>${v} ${r}return ${v}var1 + var2; "
echo -e "    ${r}return ${v}var1 + var2;        |    ${r}return ${v}var1 + var2;            |  "
echo -e "  }                            |  }                                |  "
echo -e "  ${z}"
echo -e "ASYC CODE"
echo -e "- code that does not finish immediatly"
echo -e "- async code has a callback function. This executes when the running of the function is complete"
echo -e "  ${z}"
echo -e "PROMISES"
echo -e "a promise takes a callback, whcih takes 2 arguements(which are functions), typically called resolve and reject"
echo -e "- make a Promise                      |  - use a Promise                   "
echo -e "  ${r}new ${c}Promise${v}((resolve, reject) ${n}=>${v} {  |  ${c}promise                      "
echo -e "    ${r}if${v} (ok) { ${f}resolve${v}(result) }       |    .${r}then${v}((result) ${n}=>${v} { ··· }) "
echo -e "    ${r}else${v} { ${f}reject${v}(error) }            |    .${r}catch${v}((error) ${n}=>${v} { ··· }) "
echo -e "  })                                  |  }                            "
echo -e "  ${z}"
echo -e "...agrs"
echo -e "- rigid number of args                       |  - non-rigid number of arg       "
echo -e "  ${r}const ${f}toArray_1${v} = (arg1, arg2, arg3) ${n}=>${v} {  |  ${r}const ${f}toArray_2${v} = (...args) ${n}=>${v} { "
echo -e "    ${r}return${v} [arg1, arg2, arg3];               |    ${r}return${v} args;                   "
echo -e "  }                                          |  }                                "
echo -e "  ${f}toArray_1${v}(1, 2, 3)                         |  ${f}toArray_2${v}(1, 2, 3, 4, 5)         "
echo -e "  ${z}"
echo -e "DESTRUCTURING"
echo -e "- Object Destructuring                           | - Array Destructuring                   "
echo -e " > ${r}const ${c}person${v} = {                              |  > ${r}const ${c}hobbies${v} = [${t}'golf', 'football'${v}] "
echo -e "     ${v}name:${t}\"Brian\",                               |  > ${r}let ${v}[hobby1, hobby2] = ${c}hobbies       "
echo -e "     ${v}age:${n}32  ${z}                                    |  > ${f}hobby1                               "
echo -e "     }                                           |  ${t}'golf'                                 "
echo -e " > ${f}name                                          |                                         "
echo -e "   ${v}Uncaught ReferenceError: name is not defined  |                                         "
echo -e " > ${r}const ${v}{${c}name${v}} = ${v}person                         |                                         "
echo -e " > ${f}name                                          |                                         "
echo -e "   ${t}'Brian'                                       |                                         "

# -S is the same as --save, and -D is the same as --save-dev
# NPM vs NPX: https://www.freecodecamp.org/news/npm-vs-npx-whats-the-difference/